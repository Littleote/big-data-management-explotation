import os
from pathlib import Path

import pyspark
from pyspark.sql import SparkSession

from utils import Logger


KEY, VALUE = 0, 1
T_SOURCE, T_LOOKUP = 0, 1

TABLE = "real_estate"
OUT = "out"
FILE = "descriptive"
S_PADRO = "padro_opendata/out"
S_IDEALISTA = "idealista/out"


def extract(spark: SparkSession, formatted: Path, exploitation: Path):
    log = Logger(exploitation / TABLE)
    loaded = log.get_log()

    # Check if there is a newer version
    padro = formatted / S_PADRO
    idealista = formatted / S_IDEALISTA
    current = [
        str(max([os.path.getmtime(file) for file in dir_.iterdir()]))
        for dir_ in [padro, idealista]
    ]
    loaded = loaded[-len(current) :]
    has_latest = len(loaded) == len(current) and all(
        [load == curr for load, curr in zip(loaded, current)]
    )

    if has_latest:
        return None

    # Run exploitation pipeline
    out = (
        spark.read.parquet(padro.as_posix())
        .rdd.map(
            lambda x: (
                (x.dest_district_id, x.dest_neighborhood_id, x.year),
                (x.moved, x),
            )
        )
        .reduceByKey(lambda x, y: ((x[0] or 0) + (y[0] or 0), x[1]))
        .join(
            spark.read.parquet(idealista.as_posix())
            .rdd.map(
                lambda x: ((x.district_id, x.neighborhood_id, int(x.queryDate[:4])), 1)
            )
            .reduceByKey(lambda x, y: (x or 0) + (y or 0))
        )
        .map(
            lambda x: pyspark.sql.Row(
                moved_in=x[VALUE][T_SOURCE][0],
                advertisements=x[VALUE][T_LOOKUP],
                year=x[VALUE][T_SOURCE][1].year,
                district_name=x[VALUE][T_SOURCE][1].dest_district_name,
                neighbourhood_name=x[VALUE][T_SOURCE][1].dest_neighborhood_name,
            )
        )
        .toDF()
    )
    out.write.parquet((exploitation / TABLE / OUT).as_posix(), mode="overwrite")
    with log.get_log_file() as log_file:
        print(*current, sep="\n", file=log_file)
    return OUT, FILE


def reset(exploitation: Path):
    log = Logger(exploitation / TABLE)
    log.clear()
