import os
from datetime import datetime as dt
from pathlib import Path

import pyspark
from pyspark.sql import SparkSession

from utils import Logger


KEY, VALUE = 0, 1
DATA, YEAR = 0, 1
T_SOURCE, T_LOOKUP = 0, 1

TABLE = "sales"
S_IDEALISTA = "idealista/out"
S_INCOME = "income_opendata/out"


def extract(spark: SparkSession, formatted: Path, exploitation: Path):
    log = Logger(exploitation / TABLE)
    loaded = log.get_log()[-2:]

    # Check if there is a newer version
    idealista = formatted / S_IDEALISTA
    income = formatted / S_INCOME
    current = [
        str(max([os.path.getmtime(file) for file in dir_.iterdir()]))
        for dir_ in [idealista, income]
    ]
    has_latest = len(loaded) == len(current) and all(
        [load == curr for load, curr in zip(loaded, current)]
    )

    if has_latest:
        return None

    # Run exploitation pipeline
    out = (
        spark.read.parquet(idealista.as_posix())
        .rdd.keyBy(lambda x: (x.district_id, x.neighborhood_id))
        .join(
            spark.read.parquet(income.as_posix())
            .rdd.map(lambda x: ((x.district_id, x.neighborhood_id), (x, x.year)))
            .reduceByKey(lambda x, y: x if x[YEAR] > y[YEAR] else y)
        )
        .map(
            lambda x: pyspark.sql.Row(
                **(
                    x[VALUE][T_SOURCE].asDict()
                    | {
                        "population": x[VALUE][T_LOOKUP][DATA].pop,
                        "RFD": x[VALUE][T_LOOKUP][DATA].RFD,
                        "queryDate": dt.strptime(
                            x[VALUE][T_SOURCE].queryDate, "%Y_%m_%d"
                        ),
                    }
                )
            )
        )
        .toDF()
    )
    out.write.parquet((exploitation / TABLE / "out").as_posix(), mode="overwrite")
    with log.get_log_file() as log_file:
        print(*current, sep="\n", file=log_file)
    return "out"
